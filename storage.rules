rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {

    // ---------- TEMP UPLOADS (user-owned scratch area) ----------
    match /enquiries_temp/{uid}/{fileName=**} {
      allow write: if request.auth != null
                   && request.auth.uid == uid
                   && request.resource.size < 25 * 1024 * 1024
                   && request.resource.contentType.matches(
                        'application/pdf|application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/msword'
                      )
                   // (defense-in-depth: path & extension)
                   && request.resource.name.matches(
                        '^enquiries_temp/' + request.auth.uid + '/.*\\.(pdf|docx|doc)$'
                      );
      // You can keep this as uid-only, or set to false to prevent any reads of temp files
      allow read: if request.auth != null && request.auth.uid == uid;
    }
    match /responses_temp/{uid}/{fileName=**} {
      allow write: if request.auth != null
                   && request.auth.uid == uid
                   && request.resource.size < 25 * 1024 * 1024
                   && request.resource.contentType.matches(
                        'application/pdf|application/vnd.openxmlformats-officedocument.wordprocessingml.document|application/msword'
                      )
                   // (defense-in-depth: path & extension)
                   && request.resource.name.matches(
                        '^responses_temp/' + request.auth.uid + '/.*\\.(pdf|docx|doc)$'
                      );
      // You can keep this as uid-only, or set to false to prevent any reads of temp files
      allow read: if request.auth != null && request.auth.uid == uid;
    }

    // ---------- FINAL AREA (CF/Admin SDK moves files here) ----------
    // Helpers to check Firestore publication state
    function isEnquiryPublished(enquiryId) {
      return firestore.get(
        /databases/(default)/documents/enquiries/$(enquiryId)
      ).data.isPublished == true;
    }

    function isResponsePublished(eid, rid) {
      return firestore.get(
        /databases/(default)/documents/enquiries/$(eid)/responses/$(rid)
      ).data.isPublished == true;
    }


    // Enquiry-level attachments (e.g., PDFs attached to the enquiry itself)
    match /enquiries/{enquiryId}/{filePath=**} {
      allow write: if false; // Admin SDK bypasses rules
      allow read: if request.auth != null && isEnquiryPublished(enquiryId);
    }

    // Response-level attachments
    match /enquiries/{enquiryId}/responses/{responseId}/{filePath=**} {
      allow write: if false;
      allow read: if request.auth != null && isResponsePublished(enquiryId, responseId);
    }
  }
}
