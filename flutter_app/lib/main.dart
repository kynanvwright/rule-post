import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // ðŸ‘ˆ this is generated by flutterfire configure
import 'package:flutter_app/core/widgets/app_scaffold.dart';

// Screens
import 'auth/screens/login_screen.dart';
import 'content/screens/home_screen.dart';
//Scaffolds

import 'core/widgets/post_scaffold.dart';
import 'core/widgets/category_sidebar.dart';
import '../../core/widgets/post_list.dart';
import '../../core/widgets/pane_header.dart';
import '../../content/widgets/new_post_button.dart';


Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // âœ… If using Firebase, uncomment:
  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);

  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  static final GoRouter _router = GoRouter(
    initialLocation: '/login',
    routes: [
      // Public login page (no app scaffold)
      GoRoute(
        path: '/login',
        builder: (_, __) => const LoginScreen(),
      ),

      // top-level alongside /login and the ShellRoute:
      GoRoute(
        path: '/home',
        redirect: (_, __) => '/enquiries?cat=all',
      ),

      // Persistent 3-pane shell; only the RIGHT pane (child) changes.
      ShellRoute(
        builder: (context, state, child) {
          // Read the current filter from the URL: /enquiries...?cat=<key>
          final category = state.uri.queryParameters['cat'] ?? 'all';
          // If the child route is /enquiries/:enquiryId, this will be set:
          final selectedId = state.pathParameters['enquiryId'];

          // ðŸ”§ Dummy items to prove wiring; replace with Firestore later.
          final List<EnquiryListEntry> items = List.generate(
            12,
            (i) => EnquiryListEntry(
              id: '${category}_$i',
              title: 'Enquiry #$i',
              subtitle: 'Category: $category',
            ),
          );

          return AppScaffold(
            title: 'Rule Enquiries',
            child: PostScaffold(
              title: 'Rule Enquiries',
              leftPane: CategorySidebar(
                categories: const [
                  ('all', 'All'),
                  ('mine', 'Mine'),
                  ('open', 'Open'),
                  ('closed', 'Closed'),
                ],
                selectedKey: category,
                onSelect: (c) {
                  // Replace (donâ€™t push) so it feels instantaneous and doesnâ€™t
                  // spam browser history for simple filter changes.
                  context.replace('/enquiries?cat=$c');
                },
              ),
              centerPane: EnquiryList(
                header: PaneHeader(
                  'Enquiries',
                  trailing: NewEnquiryButton(currentCategory: category),
                  ),
                items: items,
                selectedId: selectedId, // âœ… matches your constructor
                onSelect: (id) {
                  // Open detail in the RIGHT pane; keep category in querystring.
                  context.go('/enquiries/$id?cat=$category');
                },
              ),
              // RIGHT pane swaps via the ShellRoute's `child`
              rightPane: child,
            ),
          );
        },
        routes: [
          // Index: no selection â†’ gentle placeholder in right pane
          GoRoute(
            path: '/enquiries',
            builder: (_, __) => const Center(
              child: Text(
                'Select an enquiry to view details',
                style: TextStyle(fontStyle: FontStyle.italic),
              ),
            ),
          ),
          // Detail: only the right pane changes
          GoRoute(
            path: '/enquiries/:enquiryId',
            builder: (context, state) => EnquiryDetailPanel(
              enquiryId: state.pathParameters['enquiryId']!,
            ),
          ),
        ],
      ),
    ],

    // ðŸ”’ (Optional) auth guard â€” leave commented for now
    // redirect: (context, state) {
    //   final loggedIn = FirebaseAuth.instance.currentUser != null;
    //   final loggingIn = state.matchedLocation == '/login';

    //   if (!loggedIn && !loggingIn) {
    //     // Unauthed user trying to hit anything else
    //     return '/login';
    //   }

    //   if (loggedIn && loggingIn) {
    //     // Already logged in but at /login â†’ send to enquiries
    //     return '/enquiries?cat=all';
    //   }

    //   return null; // no redirect
    // },

  );

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      title: 'Rule Enquiries App',
      routerConfig: _router,
    );
  }
}
