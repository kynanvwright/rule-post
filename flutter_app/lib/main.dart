import 'package:flutter/material.dart';
import 'package:go_router/go_router.dart';
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart'; // ðŸ‘ˆ this is generated by flutterfire configure
import 'package:firebase_app_check/firebase_app_check.dart';
import 'dart:async';
import 'package:firebase_auth/firebase_auth.dart';

// Screens
import 'auth/screens/login_screen.dart';
import 'content/screens/home_screen.dart';

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(options: DefaultFirebaseOptions.currentPlatform);
  await FirebaseAppCheck.instance.activate(webProvider: ReCaptchaV3Provider('6LeP8ssrAAAAAHuCNAA-tIXVzahLuskzGP7K-Si0'));

  runApp(const MyApp());
}


/// Small helper so GoRouter re-evaluates redirects on auth changes.
class GoRouterRefreshStream extends ChangeNotifier {
  GoRouterRefreshStream(Stream<dynamic> stream) {
    _sub = stream.asBroadcastStream().listen((_) => notifyListeners());
  }
  late final StreamSubscription _sub;
  @override
  void dispose() {
    _sub.cancel();
    super.dispose();
  }
}

/// Global router with auth guard: unauthenticated users go to /login.
final _router = GoRouter(
  initialLocation: '/enquiries/all',
  refreshListenable:
      GoRouterRefreshStream(FirebaseAuth.instance.authStateChanges()),
  redirect: (context, state) {
    final loggedIn = FirebaseAuth.instance.currentUser != null;
    final loggingIn = state.matchedLocation == '/login';

    // Not logged in? Always go to /login (except if already there)
    if (!loggedIn) return loggingIn ? null : '/login';

    // Logged in but hitting /login? Kick to home.
    if (loggingIn) return '/enquiries/all';

    return null; // no redirect
  },
  routes: [
    GoRoute(
      path: '/login',
      builder: (context, state) => const LoginScreen(),
    ),
    GoRoute(
      path: '/enquiries/:category',
      builder: (context, state) => HomeScreen(
        category: state.pathParameters['category']!,
        enquiryId: null,
      ),
      routes: [
        GoRoute(
          path: ':id',
          builder: (context, state) => HomeScreen(
            category: state.pathParameters['category']!,
            enquiryId: state.pathParameters['id']!,
          ),
        ),
      ],
    ),
  ],
);

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp.router(
      debugShowCheckedModeBanner: false,
      title: 'Rule Enquiries App',
      routerConfig: _router,
    );
  }
}
